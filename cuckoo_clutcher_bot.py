import os
from telegram.error import Forbidden
from datetime import time
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from pymongo import MongoClient, ASCENDING
from pymongo.errors import DuplicateKeyError
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv('TELEGRAM_TOKEN')
MONGO_URI = os.getenv('MONGO_URI')
DB_NAME = os.getenv('DB_NAME', 'mood_tracker')

class Database:
    def __init__(self, mongo_uri, db_name):
        self.client = MongoClient(mongo_uri)
        self.db = self.client[db_name]
        self.users = self.db.users
        self.moods = self.db.moods

    def init_db(self):
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.users.create_index("user_id", unique=True)
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
            self.moods.create_index([("user_id", ASCENDING)])
            self.moods.create_index([("timestamp", ASCENDING)])
            print(f"Database {DB_NAME} initialized successfully")
        except Exception as e:
            print(f"Error initializing database: {e}")
            raise

    def save_mood(self, user_id: int, mood: str) -> bool:
        try:
            result = self.moods.insert_one({
                "user_id": user_id,
                "mood": mood,
                "timestamp": datetime.now()
            })
            return bool(result.inserted_id)
        except Exception as e:
            print(f"Error saving mood: {e}")
            return False

    def get_user(self, user_id: int):
        return self.users.find_one({"user_id": user_id})

    def create_user(self, user_id: int, username: str):
        try:
            self.users.insert_one({
                "user_id": user_id,
                "username": username,
                "created_at": datetime.now()
            })
            return True
        except DuplicateKeyError:
            return True
        except Exception as e:
            print(f"Error creating user: {e}")
            return False

    def get_weekly_stats(self, user_id: int):
        week_ago = datetime.now() - timedelta(days=7)
        stats = {"good": 0, "neutral": 0, "bad": 0}
        cursor = self.moods.find({
            "user_id": user_id,
            "timestamp": {"$gte": week_ago}
        })
        for record in cursor:
            stats[record["mood"]] += 1
        return stats

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(MONGO_URI, DB_NAME)
db.init_db()

def get_main_keyboard():
    keyboard = [[KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üìù")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_mood_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("–•–æ—Ä–æ—à–æ üòä", callback_data="good"),
            InlineKeyboardButton("–ù–∏–∫–∞–∫ üòê", callback_data="neutral"),
            InlineKeyboardButton("–ü–ª–æ—Ö–æ üòû", callback_data="bad")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    if not user:
        success = db.create_user(user_id, update.effective_user.username or "")
        if not success:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º 3 —Ä–∞–∑
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –ë—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ —Ç–≤–æ–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç—Ä–∏ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å. "
        "–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å —Å–∞–º –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é"
    )
    await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    stats_data = db.get_weekly_stats(user_id)
    stats_text = (
        "üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        f"üòä –•–æ—Ä–æ—à–æ: {stats_data['good']}\n"
        f"üòê –ù–∏–∫–∞–∫: {stats_data['neutral']}\n"
        f"üòû –ü–ª–æ—Ö–æ: {stats_data['bad']}"
    )
    await update.message.reply_text(stats_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üìù":
        await update.message.reply_text("–ö–∞–∫ —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–π—á–∞—Å?", reply_markup=get_mood_keyboard())

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    mood = query.data
    success = db.save_mood(user_id, mood)
    if success:
        mood_emojis = {"good": "üòä", "neutral": "üòê", "bad": "üòû"}
        mood_text = {"good": "—Ö–æ—Ä–æ—à–µ–µ", "neutral": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ", "bad": "–ø–ª–æ—Ö–æ–µ"}
        await query.edit_message_text(
            f"–ó–∞–ø–∏—Å–∞–ª —Ç–≤–æ–µ {mood_text[mood]} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ {mood_emojis[mood]}\n–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å!"
        )
    else:
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

async def send_mood_reminder(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    users = db.users.find()
    for user in users:
        user_id = user['user_id']
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="–ö–∞–∫ —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–π—á–∞—Å?",
                reply_markup=get_mood_keyboard()
            )
        except Forbidden:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def setup_job_queue(app: Application):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    times = [
        time(hour=9, minute=0),   # 09:00 UTC
        time(hour=14, minute=0),  # 14:00 UTC
        time(hour=20, minute=0)   # 20:00 UTC
    ]
    
    for t in times:
        app.job_queue.run_daily(
            send_mood_reminder,
            time=t,
            name=f"daily_mood_check_{t.hour}_{t.minute}"
        )



def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞–Ω–∏–π
    setup_job_queue(app)
    
    print("Bot started!")
    app.run_polling()

if __name__ == '__main__':
    main()
