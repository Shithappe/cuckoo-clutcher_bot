import os
from telegram.error import Forbidden
from datetime import time
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from pymongo import MongoClient, ASCENDING
from pymongo.errors import DuplicateKeyError
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv('TELEGRAM_TOKEN')
MONGO_URI = os.getenv('MONGO_URI')
DB_NAME = os.getenv('DB_NAME', 'mood_tracker')

class Database:
    def __init__(self, mongo_uri, db_name):
        self.client = MongoClient(mongo_uri)
        self.db = self.client[db_name]
        self.users = self.db.users
        self.moods = self.db.moods

    def init_db(self):
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.users.create_index("user_id", unique=True)
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
            self.moods.create_index([("user_id", ASCENDING)])
            self.moods.create_index([("timestamp", ASCENDING)])
            print(f"Database {DB_NAME} initialized successfully")
        except Exception as e:
            print(f"Error initializing database: {e}")
            raise

    def save_mood(self, user_id: int, mood_value: int) -> bool:
        try:
            result = self.moods.insert_one({
                "user_id": user_id,
                "mood_value": mood_value,
                "timestamp": datetime.now()
            })
            return bool(result.inserted_id)
        except Exception as e:
            print(f"Error saving mood: {e}")
            return False

    def get_user(self, user_id: int):
        return self.users.find_one({"user_id": user_id})

    def create_user(self, user_id: int, username: str):
        try:
            self.users.insert_one({
                "user_id": user_id,
                "username": username,
                "created_at": datetime.now()
            })
            return True
        except DuplicateKeyError:
            return True
        except Exception as e:
            print(f"Error creating user: {e}")
            return False

    def get_weekly_stats(self, user_id: int):
        week_ago = datetime.now() - timedelta(days=7)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        cursor = self.moods.find({
            "user_id": user_id,
            "timestamp": {"$gte": week_ago}
        })
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        records = list(cursor)
        stats = {
            "total_entries": len(records),
            "average_mood": 0,
            "mood_distribution": {
                "0-3": 0,  # –ü–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
                "4-6": 0,  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
                "7-10": 0  # –•–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
            }
        }
        
        if records:
            total_mood = 0
            for record in records:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                if "mood_value" in record:
                    mood_value = record["mood_value"]
                elif "mood" in record:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ —á–∏—Å–ª–æ–≤–æ–π
                    mood_str = record["mood"]
                    if mood_str == "good":
                        mood_value = 8
                    elif mood_str == "neutral":
                        mood_value = 5
                    elif mood_str == "bad":
                        mood_value = 2
                    else:
                        # –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        mood_value = 5
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    mood_value = 5
                    
                total_mood += mood_value
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                if 0 <= mood_value <= 3:
                    stats["mood_distribution"]["0-3"] += 1
                elif 4 <= mood_value <= 6:
                    stats["mood_distribution"]["4-6"] += 1
                elif 7 <= mood_value <= 10:
                    stats["mood_distribution"]["7-10"] += 1
            
            stats["average_mood"] = round(total_mood / len(records), 1)
        
        return stats

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(MONGO_URI, DB_NAME)
db.init_db()

def get_main_keyboard():
    keyboard = [
        [KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üìä")],
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üìù")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_mood_keyboard():
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —à–∫–∞–ª–æ–π –æ—Ç 0 –¥–æ 10
    keyboard = []
    
    # –ü–µ—Ä–≤—ã–π —Ä—è–¥: 0-4
    row1 = [InlineKeyboardButton(f"{i}", callback_data=f"mood_{i}") for i in range(5)]
    keyboard.append(row1)
    
    # –í—Ç–æ—Ä–æ–π —Ä—è–¥: 5-10
    row2 = [InlineKeyboardButton(f"{i}", callback_data=f"mood_{i}") for i in range(5, 11)]
    keyboard.append(row2)
    
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    if not user:
        success = db.create_user(user_id, update.effective_user.username or "")
        if not success:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –ë—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ —Ç–≤–æ–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç—Ä–∏ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å. "
        "–û—Ü–µ–Ω–∏ —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 (–æ—á–µ–Ω—å –ø–ª–æ—Ö–æ) –¥–æ 10 (–æ—Ç–ª–∏—á–Ω–æ).\n\n"
        "–¢—ã –º–æ–∂–µ—à—å —Å–∞–º –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é"
    )
    await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    stats_data = db.get_weekly_stats(user_id)
    
    if stats_data["total_entries"] == 0:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.")
        return
    
    stats_text = (
        "üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats_data['total_entries']}\n"
        f"–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {stats_data['average_mood']}/10\n\n"
        f"üòî –ü–ª–æ—Ö–æ–µ (0-3): {stats_data['mood_distribution']['0-3']}\n"
        f"üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ (4-6): {stats_data['mood_distribution']['4-6']}\n"
        f"üòä –•–æ—Ä–æ—à–µ–µ (7-10): {stats_data['mood_distribution']['7-10']}"
    )
    await update.message.reply_text(stats_text, reply_markup=get_main_keyboard())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üìù":
        await update.message.reply_text(
            "–ö–∞–∫ —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–π—á–∞—Å? –û—Ü–µ–Ω–∏ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10:\n"
            "0 = –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ, 10 = –æ—Ç–ª–∏—á–Ω–æ", 
            reply_markup=get_mood_keyboard()
        )
    elif update.message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üìä":
        await stats(update, context)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–∑ callback_data
    callback_data = query.data
    if callback_data.startswith("mood_"):
        mood_value = int(callback_data.split("_")[1])
        success = db.save_mood(user_id, mood_value)
        
        if success:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            if 0 <= mood_value <= 3:
                emoji = "üòî"
            elif 4 <= mood_value <= 6:
                emoji = "üòê"
            else:
                emoji = "üòä"
                
            await query.edit_message_text(
                f"–ó–∞–ø–∏—Å–∞–ª —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood_value}/10 {emoji}\n"
                "–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å!"
            )
        else:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

async def send_mood_reminder(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    users = db.users.find()
    for user in users:
        user_id = user['user_id']
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="–ö–∞–∫ —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–π—á–∞—Å? –û—Ü–µ–Ω–∏ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10:",
                reply_markup=get_mood_keyboard()
            )
        except Forbidden:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def setup_job_queue(app: Application):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    times = [
        time(hour=9, minute=0),   # 09:00 UTC
        time(hour=14, minute=0),  # 14:00 UTC
        time(hour=20, minute=0)   # 20:00 UTC
    ]
    
    for t in times:
        app.job_queue.run_daily(
            send_mood_reminder,
            time=t,
            name=f"daily_mood_check_{t.hour}_{t.minute}"
        )

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞–Ω–∏–π
    setup_job_queue(app)
    
    print("Bot started!")
    app.run_polling()

if __name__ == '__main__':
    main()